version: '3.3'
services:
  traefik:
    image: traefik:v2.4.7
    container_name: traefik
    command:
      - --log.level=ERROR
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.web_secure.address=:443
      - --api
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Let's Encrypt
      - --certificatesresolvers.le.acme.dnschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.email=${EMAIL}
      - --certificatesresolvers.le.acme.storage=traefik/acme.json
      # Testing server to avoid Let's Encrypt rate limiting certs
      #- --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - 80:80
      - 443:443
    environment:
      CF_API_EMAIL  : ${EMAIL}
      CF_API_KEY    : ${CF_API_KEY}
    volumes:
      - ${HOME}/web_services/traefik/acme.json:/traefik/acme.json:rw
      - ${HOME}/web_services/.htpasswd:/traefik/.htpasswd:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      # Dashboard
      traefik.enable: 'true'
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN}`)
      traefik.http.routers.traefik.entrypoints: web_secure
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authelia@docker
      # Authelia https://www.authelia.com/docs/deployment/supported-proxies/traefik2.x.html
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://auth.${DOMAIN}/
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: 'true'
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: X-Forward-User
      # Global https redirect
      traefik.http.routers.https_redirect.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.https_redirect.entrypoints: web
      traefik.http.routers.https_redirect.middlewares: redirect_to_https
      traefik.http.middlewares.redirect_to_https.redirectscheme.scheme: https
      # Let's Encrypt Wildcard certs
      traefik.http.routers.traefik.tls.certresolver: le
      traefik.http.routers.traefik.tls.domains[0].main: ${DOMAIN}
      traefik.http.routers.traefik.tls.domains[0].sans: '*.${DOMAIN}'
    restart: unless-stopped

  authelia:
    image: authelia/authelia:4.21.0
    container_name: authelia
    depends_on: [traefik]
    environment:
      TZ: ${TZ}
    volumes:
      - ${HOME}/web_services/authelia:/config
    labels:
      traefik.enable: 'true'
      traefik.http.routers.authelia.entrypoints: web_secure
      traefik.http.routers.authelia.rule: Host(`auth.${DOMAIN}`)
      traefik.http.routers.authelia.tls: 'true'
    restart: unless-stopped

  fava:
    image: yegle/fava:version-1.14
    container_name: fava
    depends_on: [traefik, authelia]
    environment:
      BEANCOUNT_FILE: /my_finances/main.bean
    volumes:
      - ${HOME}/web_services/my_finances:/my_finances
    labels:
      traefik.enable: 'true'
      traefik.http.routers.fava.entrypoints: web_secure
      traefik.http.routers.fava.rule: Host(`fava.${DOMAIN}`)
      traefik.http.routers.fava.tls: 'true'
      traefik.http.routers.fava.middlewares: authelia@docker
    restart: unless-stopped

  bitwarden:
    image: bitwardenrs/server:1.14-alpine
    container_name: bitwarden
    depends_on: [traefik]
    environment:
      WEBSOCKET_ENABLED : 'false'
      SIGNUPS_ALLOWED   : 'false'
    volumes:
      - ${HOME}/web_services/bitwarden:/data
    labels:
      traefik.enable: 'true'
      traefik.http.routers.bitwarden.entrypoints: web_secure
      traefik.http.routers.bitwarden.rule: Host(`bitwarden.${DOMAIN}`)
      traefik.http.routers.bitwarden.tls: 'true'
    restart: unless-stopped

  transmission:
    image: linuxserver/transmission:3.00-r0-ls60
    container_name: transmission
    depends_on: [traefik, authelia]
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      USER: ${USER}
      PASS: ${PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${HOME}/web_services/transmission/config:/config
      - ${HOME}/web_services/transmission/downloads:/downloads
    labels:
      traefik.enable: 'true'
      traefik.http.routers.transmission.entrypoints: web_secure
      traefik.http.routers.transmission.rule: Host(`torrents.${DOMAIN}`)
      traefik.http.routers.transmission.tls: 'true'
      traefik.http.routers.transmission.middlewares: authelia@docker
    restart: unless-stopped

  filebrowser:
    image: filebrowser/filebrowser:v2
    container_name: filebrowser
    depends_on: [traefik]
    volumes:
      - ${HOME}/web_services/transmission/downloads/complete:/srv
      - ${HOME}/web_services/filebrowser/database.db:/database.db
    labels:
      traefik.enable: 'true'
      traefik.http.routers.filebrowser.entrypoints: web_secure
      traefik.http.routers.filebrowser.rule: Host(`files.${DOMAIN}`)
      traefik.http.routers.filebrowser.tls: 'true'
    restart: unless-stopped

  fail2ban:
    image: crazymax/fail2ban:0.11.1
    container_name: fail2ban
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ${HOME}/web_services/fail2ban/data:/data
      - /var/log:/var/log:ro
    restart: unless-stopped

  caddy:
    image: caddy:2.1.1-alpine
    container_name: caddy
    depends_on: [traefik]
    volumes:
      - ${HOME}/web_services/caddy/www:/usr/share/caddy
      - ${HOME}/web_services/caddy/data:/data
      - ${HOME}/web_services/caddy/config:/config
    labels:
      traefik.enable: 'true'
      traefik.http.routers.caddy.entrypoints: web_secure
      traefik.http.routers.caddy.rule: Host(`${DOMAIN}`)
      traefik.http.routers.caddy.tls: 'true'
    restart: unless-stopped

  freshrss:
    image: linuxserver/freshrss:1.16.2-ls63
    container_name: freshrss
    depends_on: [traefik, authelia]
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - ${HOME}/web_services/freshrss/config:/config
    labels:
      traefik.enable: 'true'
      traefik.http.routers.freshrss.entrypoints: web_secure
      traefik.http.routers.freshrss.rule: Host(`rss.${DOMAIN}`)
      traefik.http.routers.freshrss.tls: 'true'
      traefik.http.routers.freshrss.middlewares: authelia@docker
    restart: unless-stopped
